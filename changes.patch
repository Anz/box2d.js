diff --git a/javascript/Box2D/Collision/b2AABB.js b/javascript/Box2D/Collision/b2AABB.js
index 0f21185..5d316c9 100644
--- a/javascript/Box2D/Collision/b2AABB.js
+++ b/javascript/Box2D/Collision/b2AABB.js
@@ -35,11 +35,11 @@ b2AABB.prototype.GetExtents = function () {
 		 (this.upperBound.y - this.lowerBound.y) / 2);
 	}
 b2AABB.prototype.Contains = function (aabb) {
-		var result = true;
-		result &&= this.lowerBound.x <= aabb.lowerBound.x;
-		result &&= this.lowerBound.y <= aabb.lowerBound.y;
-		result &&= aabb.upperBound.x <= this.upperBound.x;
-		result &&= aabb.upperBound.y <= this.upperBound.y;
+		var result = true
+			&& (this.lowerBound.x <= aabb.lowerBound.x)
+			&& (this.lowerBound.y <= aabb.lowerBound.y)
+			&& (aabb.upperBound.x <= this.upperBound.x)
+			&& (aabb.upperBound.y <= this.upperBound.y);
 		return result;
 	}
 b2AABB.prototype.RayCast = function (output, input) {
diff --git a/javascript/Box2D/Collision/b2DistanceProxy.js b/javascript/Box2D/Collision/b2DistanceProxy.js
index 24a4ebd..47729dd 100644
--- a/javascript/Box2D/Collision/b2DistanceProxy.js
+++ b/javascript/Box2D/Collision/b2DistanceProxy.js
@@ -18,7 +18,7 @@ b2DistanceProxy.prototype.Set = function (shape) {
 				case b2Shape.e_circleShape:
 				{
 					var circle = shape;
-					this.m_vertices = new Array(1, true);
+					this.m_vertices = new Array(1);
 					this.m_vertices[0] = circle.m_p;
 					this.m_count = 1;
 					this.m_radius = circle.m_radius;
diff --git a/javascript/Box2D/Common/Math/b2Vec2.js b/javascript/Box2D/Common/Math/b2Vec2.js
index 74b1e84..291f692 100644
--- a/javascript/Box2D/Common/Math/b2Vec2.js
+++ b/javascript/Box2D/Common/Math/b2Vec2.js
@@ -1,9 +1,7 @@
-var b2Vec2 = function() {
-this.__varz();
-this.__constructor.apply(this, arguments);
+var b2Vec2 = function(x_, y_) {
+    if(arguments.length == 2) {
+        this.x=x_; this.y=y_;
 }
-b2Vec2.prototype.__constructor = function (x_, y_) {this.x=x_; this.y=y_;}
-b2Vec2.prototype.__varz = function(){
 }
 // static attributes
 // static methods
@@ -11,8 +9,8 @@ b2Vec2.Make = function (x_, y_) {
 		return new b2Vec2(x_, y_);
 	}
 // attributes
-b2Vec2.prototype.x =  null;
-b2Vec2.prototype.y =  null;
+b2Vec2.prototype.x =  0;
+b2Vec2.prototype.y =  0;
 // methods
 b2Vec2.prototype.SetZero = function () { this.x = 0.0; this.y = 0.0; }
 b2Vec2.prototype.Set = function (x_, y_) {this.x=x_; this.y=y_;}
diff --git a/javascript/Box2D/Common/Math/b2Vec3.js b/javascript/Box2D/Common/Math/b2Vec3.js
index aeb1a5c..f9c01e9 100644
--- a/javascript/Box2D/Common/Math/b2Vec3.js
+++ b/javascript/Box2D/Common/Math/b2Vec3.js
@@ -1,28 +1,24 @@
-var b2Vec3 = function() {
-this.__varz();
-this.__constructor.apply(this, arguments);
-}
-b2Vec3.prototype.__constructor = function (this.x , this.y , this.z ) {
-		this.x = this.x;
-		this.y = this.y;
-		this.z = this.z;
-	}
-b2Vec3.prototype.__varz = function(){
+var b2Vec3 = function(x, y, z) {
+	if(arguments.length == 3) {
+		this.x=x; this.y=y; this.z=z;
+	}	
 }
+
 // static attributes
 // static methods
 // attributes
-b2Vec3.prototype.x =  null;
-b2Vec3.prototype.y =  null;
-b2Vec3.prototype.z =  null;
+b2Vec3.prototype.x =  0;
+b2Vec3.prototype.y =  0;
+b2Vec3.prototype.z =  0;
+
 // methods
 b2Vec3.prototype.SetZero = function () {
 		this.x = this.y = this.z = 0.0;
 	}
-b2Vec3.prototype.Set = function (this.x, this.y, this.z) {
-		this.x = this.x;
-		this.y = this.y;
-		this.z = this.z;
+b2Vec3.prototype.Set = function (x, y, z) {
+		this.x = x;
+		this.y = y;
+		this.z = z;
 	}
 b2Vec3.prototype.SetV = function (v) {
 		this.x = v.x;
